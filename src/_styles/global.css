:root {
  --siteMaxWidth: 1400px;
  --sitePadding: 2rem;

  --coreFont: serif; /* Include fallbacks*/

  --clrPrimary: oklch(61.84% 0.2473 24.65 / 94.84%);
  --clrSecondary: #000;
  --clrText: #000;
  --clrBg: #000000;
  --clrBgLight: #eeeeee;
  --clrBorder: #3b3b3b;

  --clrPianoBg: oklch(25.18% 0.0064 34.3);

  --keyWhiteWidth: 3.5rem;
  --keyWhite: oklch(96.9% 0.0053 106.5);
  --keyWhiteShadow: oklch(from var(--keyWhite) calc(l - 0.05) c h);
  --keyWhiteBorder: oklch(from var(--keyWhite) calc(l - 0.7) calc(c + 0.01) calc(h + 1));

  --keyBlackWidth: calc(var(--keyWhiteWidth) * 0.6);
  --keyBlackHeight: calc(var(--keyWhiteWidth) * 4);
  --keyBlack: oklch(7.06% 0.0145 82.32);
  --keyBlackShine: oklch(25.65% 0.004 84.58);
}
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
html {
  font-family: var(--coreFont);
  font-size: 62.5%;
  color: var(--clrText);
  background-color: var(--clrBg);
  scroll-behavior: smooth;
}
@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
}
body {
  font-size: 1.6rem;
}
#app {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  min-height: 100dvh;
  padding: 0 var(--sitePadding);
}
main {
  flex-grow: 1;
}
/* DEFAULTS */
button {
  display: block;
  border: none;
  outline: none;
}
button:not(:disabled) {
  cursor: pointer;
}

/* PIANO */
/* Add url / assets / noise.png repeating texture on top of background color */
#piano {
  max-width: fit-content;
  padding: 6rem calc(var(--keyWhiteWidth) * 2) 2rem calc(var(--keyWhiteWidth) * 2);
  background-color: var(--clrPianoBg);
  background-image: url(/assets/noise.png);
  background-size: 96px 96px;
  background-repeat: repeat;
}
#piano-header {
  color: white;
}
#control-board {
  display: flex;
  align-items: center;
  gap: 1rem;
  text-align: center;
}
#transpose-controls {
  display: flex;
  gap: 2rem;
  text-align: center;
}
.transpose-control {
  --glow: oklch(from var(--clrPrimary) 1 0.1 h);
  --darker: oklch(from var(--clrPrimary) 0.3 c h);
  position: relative;
  width: 4rem;
  height: 4rem;
  border-radius: 999rem;
  padding: 0.4rem;
  color: white;
  background: conic-gradient(var(--glow), var(--darker), var(--glow), var(--darker), var(--glow));
}
.transpose-control label {
  position: absolute;
  top: -3rem;
  transform: translateX(-50%);
  left: 50%;
  max-width: 120%;
  width: 120%;
  border: 1px solid red;
}
.transpose-control button {
  width: 100%;
  height: 100%;
  border-radius: 999rem;
  vertical-align: middle;
  background-color: var(--clrPianoBg);
}
#piano-liner {
  height: 2rem;
  background: linear-gradient(to top, oklch(from var(--clrPianoBg) calc(l - 0.1) c h) 70%, transparent);
}
#piano-keys {
  position: relative;
  display: flex;
  background-color: var(--keyBlackShine);
  outline: none;
  overflow-x: scroll;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  touch-action: none;
  -webkit-user-drag: none;
  scrollbar-width: thin;
}
#piano-keys > button {
  flex-shrink: 0;
}
.key {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  overflow: hidden;
}
.key-core {
  flex-grow: 1;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  padding: 1.5rem 0;
}
.key-white {
  width: var(--keyWhiteWidth);
  height: calc(var(--keyWhiteWidth) * 6);
  color: black;
  background-color: var(--keyWhiteShadow);
  border-top: calc(var(--keyWhiteWidth) * 0.1) solid var(--clrPrimary);
  border-right: 1px solid var(--keyWhiteBorder);
  border-left: 1px solid var(--keyWhiteBorder);
  transition: clip-path 0.05s ease-in;
}
.right-L {
  clip-path: polygon(
    0 0,
    calc(100% - (var(--keyBlackWidth) / 2)) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) var(--keyBlackHeight),
    100% var(--keyBlackHeight),
    100% 100%,
    0 100%
  );
}
.right-L.playing {
  clip-path: polygon(
    0 0,
    calc(100% - (var(--keyBlackWidth) / 2)) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) calc(var(--keyBlackHeight) + 5%),
    100% calc(var(--keyBlackHeight) + 5%),
    100% 100%,
    0 100%
  );
}
.double-L {
  clip-path: polygon(
    calc(var(--keyBlackWidth) / 2) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) var(--keyBlackHeight),
    100% var(--keyBlackHeight),
    100% 100%,
    0 100%,
    0 var(--keyBlackHeight),
    calc(var(--keyBlackWidth) / 2) var(--keyBlackHeight)
  );
}
.double-L.playing {
  clip-path: polygon(
    calc(var(--keyBlackWidth) / 2) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) 0,
    calc(100% - (var(--keyBlackWidth) / 2)) calc(var(--keyBlackHeight) + 5%),
    100% calc(var(--keyBlackHeight) + 5%),
    100% 100%,
    0 100%,
    0 calc(var(--keyBlackHeight) + 5%),
    calc(var(--keyBlackWidth) / 2) calc(var(--keyBlackHeight) + 5%)
  );
}
.left-L {
  clip-path: polygon(
    calc(var(--keyBlackWidth) / 2) 0,
    100% 0,
    100% 100%,
    0 100%,
    0 var(--keyBlackHeight),
    calc(var(--keyBlackWidth) / 2) var(--keyBlackHeight)
  );
}
.left-L.playing {
  clip-path: polygon(
    calc(var(--keyBlackWidth) / 2) 0,
    100% 0,
    100% 100%,
    0 100%,
    0 calc(var(--keyBlackHeight) + 5%),
    calc(var(--keyBlackWidth) / 2) calc(var(--keyBlackHeight) + 5%)
  );
}
.key-white .key-core {
  border-radius: 0 0 0.4rem 0.4rem;
  background: var(--keyWhite);
  box-shadow: 0 0.2rem 0.2rem oklch(from var(--keyWhiteBorder) l c h / 0.1);
}
.key-white .key-bottom {
  height: 10%;
  transition: height 0.05s ease-in;
  z-index: -1;
}
.key-white.playing .key-bottom {
  height: 2%;
}
.key-black {
  gap: 1%;
  position: absolute;
  top: 0;
  width: var(--keyBlackWidth);
  height: calc(var(--keyWhiteWidth) * 4);
  color: #fff;
  background-color: var(--keyBlack);
  z-index: 1;
}
.key-black .key-core {
  background-color: var(--keyBlackShine);
  border-radius: 0 0 1rem 1rem;
  box-shadow: inset 0 -0.6rem 0.1rem -0.5rem oklch(from var(--keyBlackShine) calc(l + 0.7) c h);
  transition: box-shadow 0.05s ease-in;
}
.key-black.playing .key-core {
  box-shadow: inset 0 -0.6rem 0.1rem -0.5rem oklch(from var(--keyBlackShine) calc(l + 0.7) c h / 0.4);
}
.key-black .key-bottom {
  height: 20%;
  background-color: var(--keyBlackShine);
  border-radius: 50% 50% 0 0;
  box-shadow: inset 0 0.55rem 0.1rem -0.5rem oklch(from var(--keyBlackShine) calc(l + 0.7) c h / 0.9);
  transition: height 0.05s ease-in;
}
.key-black.playing .key-bottom {
  height: 10%;
  box-shadow: inset 0 0.55rem 0.1rem -0.5rem oklch(from var(--keyBlackShine) calc(l + 0.7) c h / 0.4);
}
